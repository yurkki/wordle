package org.example.wordle.service;

import org.example.wordle.repository.WordsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.util.List;
import java.util.Random;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
 */
@Service
public class DailyWordService {

    private final WordsRepository wordsRepository;
    private final DictionaryApiService dictionaryApiService;
    private final LocalTimeService localTimeService;
    
    // –ö—ç—à –¥–ª—è —Å–ª–æ–≤–∞ –¥–Ω—è - –∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
    private String cachedTodayWord = null;
    private LocalDate cachedDate = null;

    @Autowired
    public DailyWordService(WordsRepository wordsRepository, DictionaryApiService dictionaryApiService, LocalTimeService localTimeService) {
        this.wordsRepository = wordsRepository;
        this.dictionaryApiService = dictionaryApiService;
        this.localTimeService = localTimeService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     * 
     * –ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
     * —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ
     * —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ –¥–∞—Ç–∞–º. –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API.
     */
    public String getWordForDate(LocalDate date) {
        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ 5-–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        List<String> fiveLetterWords = wordsRepository.getFiveLetterWords();
        
        if (fiveLetterWords.isEmpty()) {
            throw new IllegalStateException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö 5-–±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤");
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        long year = date.getYear();
        int month = date.getMonthValue();
        int day = date.getDayOfMonth();
        
        // –°–æ–∑–¥–∞–µ–º seed —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        long seed = year * 10000L + month * 100L + day;
        seed = seed * 31L + 17L; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        
        // –°–æ–∑–¥–∞–µ–º Random —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed
        Random random = new Random(seed);
        
        // –ò—â–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
        return findValidWordWithApiCheck(fiveLetterWords, random, date);
    }
    
    /**
     * –ò—â–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
     * –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –≤—ã–±–∏—Ä–∞–µ—Ç –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ
     */
    private String findValidWordWithApiCheck(List<String> words, Random random, LocalDate date) {
        int maxAttempts = Math.min(50, words.size()); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        int baseIndex = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç—å - –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        // –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        for (int i = 0; i < 3; i++) {
            baseIndex = random.nextInt(words.size());
        }
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ, –Ω–∞—á–∏–Ω–∞—è —Å –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        for (int attempt = 0; attempt < maxAttempts; attempt++) {
            int wordIndex = (baseIndex + attempt) % words.size();
            String candidateWord = words.get(wordIndex);
            
            System.out.println("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ –¥–Ω—è –¥–ª—è " + date + ": " + candidateWord + " (–ø–æ–ø—ã—Ç–∫–∞ " + (attempt + 1) + ")");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
            if (dictionaryApiService.isWordValid(candidateWord)) {
                System.out.println("–°–ª–æ–≤–æ –¥–Ω—è –≤—ã–±—Ä–∞–Ω–æ: " + candidateWord + " (–≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API –ø—Ä–æ–π–¥–µ–Ω–∞)");
                return candidateWord;
            } else {
                System.out.println("–°–ª–æ–≤–æ " + candidateWord + " –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ");
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–ª–æ–≤–æ
        String fallbackWord = words.get(baseIndex);
        System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: " + fallbackWord);
        return fallbackWord;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
     */
    public String getTodayWord() {
        LocalDate today = localTimeService.getCurrentMoscowDate();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (cachedTodayWord != null && cachedDate != null && cachedDate.equals(today)) {
            System.out.println("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è: " + cachedTodayWord + " (–¥–∞—Ç–∞: " + today + ")");
            return cachedTodayWord;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è
        System.out.println("üéØ –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è –¥–ª—è " + today + " (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)");
        String todayWord = getWordForDate(today);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cachedTodayWord = todayWord;
        cachedDate = today;
        
        System.out.println("‚úÖ –°–ª–æ–≤–æ –¥–Ω—è –≤—ã–±—Ä–∞–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ: " + todayWord + " (–¥–∞—Ç–∞: " + today + ")");
        return todayWord;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ —Å–ª–æ–≤–æ–º –¥–Ω—è
     */
    public boolean isTodayWord(String word) {
        return word != null && word.equalsIgnoreCase(getTodayWord());
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
     */
    public String getTodayDateString() {
        return localTimeService.getCurrentMoscowDateString();
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Å–ª–æ–≤–∞ –¥–Ω—è
     * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    public void clearCache() {
        cachedTodayWord = null;
        cachedDate = null;
        System.out.println("üóëÔ∏è –ö—ç—à —Å–ª–æ–≤–∞ –¥–Ω—è –æ—á–∏—â–µ–Ω");
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—ç—à–µ
     */
    public String getCacheInfo() {
        if (cachedTodayWord != null && cachedDate != null) {
            return "–ö—ç—à: " + cachedTodayWord + " (–¥–∞—Ç–∞: " + cachedDate + ")";
        } else {
            return "–ö—ç—à –ø—É—Å—Ç";
        }
    }
}
