package org.example.wordle;

import org.example.wordle.service.FriendGameService;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

/**
 * –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏
 */
@SpringBootTest
public class FriendGameTest {

    @Test
    public void testSaveAndGetFriendWord() {
        FriendGameService friendGameService = new FriendGameService();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
        String word = "–°–õ–û–í–û";
        String wordId = friendGameService.saveFriendWord(word);
        
        assertNotNull(wordId, "word_id –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
        assertTrue(wordId.length() > 0, "word_id –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã");
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ ID
        String retrievedWord = friendGameService.getFriendWord(wordId);
        assertEquals(word, retrievedWord, "–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assertTrue(friendGameService.isFriendGameExists(wordId), "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        LocalDateTime timestamp = friendGameService.getGameTimestamp(wordId);
        assertNotNull(timestamp, "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω");
        System.out.println("üìù –°–ª–æ–≤–æ: " + word);
        System.out.println("üÜî ID: " + wordId);
        System.out.println("‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " + timestamp);
    }
    
    @Test
    public void testInvalidWord() {
        FriendGameService friendGameService = new FriendGameService();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        assertThrows(IllegalArgumentException.class, () -> {
            friendGameService.saveFriendWord("–°–õ–û"); // 3 –±—É–∫–≤—ã
        });
        
        assertThrows(IllegalArgumentException.class, () -> {
            friendGameService.saveFriendWord("–°–õ–û–í–ê–†–¨"); // 7 –±—É–∫–≤
        });
        
        assertThrows(IllegalArgumentException.class, () -> {
            friendGameService.saveFriendWord(null); // null
        });
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω");
    }
    
    @Test
    public void testNonExistentWord() {
        FriendGameService friendGameService = new FriendGameService();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ
        String nonExistentId = "nonexistent123";
        String word = friendGameService.getFriendWord(nonExistentId);
        assertNull(word, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assertFalse(friendGameService.isFriendGameExists(nonExistentId), "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω");
    }
    
    @Test
    public void testMultipleWords() {
        FriendGameService friendGameService = new FriendGameService();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤
        String word1 = "–°–õ–û–í–û";
        String word2 = "–ò–ì–†–ê";
        String word3 = "–¢–ï–°–¢";
        
        String id1 = friendGameService.saveFriendWord(word1);
        String id2 = friendGameService.saveFriendWord(word2);
        String id3 = friendGameService.saveFriendWord(word3);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã
        assertNotEquals(id1, id2, "ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏");
        assertNotEquals(id2, id3, "ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏");
        assertNotEquals(id1, id3, "ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        assertEquals(word1, friendGameService.getFriendWord(id1));
        assertEquals(word2, friendGameService.getFriendWord(id2));
        assertEquals(word3, friendGameService.getFriendWord(id3));
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω");
        System.out.println("üìù –°–ª–æ–≤–æ 1: " + word1 + " (ID: " + id1 + ")");
        System.out.println("üìù –°–ª–æ–≤–æ 2: " + word2 + " (ID: " + id2 + ")");
        System.out.println("üìù –°–ª–æ–≤–æ 3: " + word3 + " (ID: " + id3 + ")");
    }
    
    @Test
    public void testStats() {
        FriendGameService friendGameService = new FriendGameService();
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π
        String initialStats = friendGameService.getFriendGamesStats();
        assertTrue(initialStats.contains("–í—Å–µ–≥–æ –∏–≥—Ä —Å –¥—Ä—É–∑—å—è–º–∏: 0"), "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–≥—Ä");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä
        friendGameService.saveFriendWord("–°–õ–û–í–û");
        friendGameService.saveFriendWord("–ò–ì–†–ê");
        
        String statsAfter = friendGameService.getFriendGamesStats();
        assertTrue(statsAfter.contains("–í—Å–µ–≥–æ –∏–≥—Ä —Å –¥—Ä—É–∑—å—è–º–∏: 2"), "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∏–≥—Ä—ã");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω");
        System.out.println("üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: " + initialStats);
        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " + statsAfter);
    }
}
