package org.example.wordle.controller;

import org.example.wordle.model.GameState;
import org.example.wordle.model.GameMode;
import org.example.wordle.model.WordGuess;
import org.example.wordle.model.DailyStats;
import org.example.wordle.service.WordleService;
import org.example.wordle.service.DailyWordService;
import org.example.wordle.service.FriendGameService;
import org.example.wordle.service.PersistentPlayerIdService;
import org.example.wordle.service.PlayerStatsService;
import org.example.wordle.service.PlayerStatsMigrationService;
import org.example.wordle.model.PlayerStatsEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∏–≥—Ä—ã Wordle
 */
@Controller
public class WordleController {
    
    @Autowired
    private WordleService wordleService;
    
    @Autowired
    private DailyWordService dailyWordService;
    
    @Autowired
    private FriendGameService friendGameService;

    @Autowired
    private PersistentPlayerIdService persistentPlayerIdService;
    
    @Autowired
    private PlayerStatsService playerStatsService;
    
    @Autowired
    private PlayerStatsMigrationService playerStatsMigrationService;
    
    @Value("${app.domain}")
    private String appDomain;
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç playerId –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏.
     * 
     * –õ–æ–≥–∏–∫–∞:
     * 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é (–±—ã—Å—Ç—Ä–æ)
     * 2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º PersistentPlayerIdService (–∫—É–∫–∏ + —Å–æ–∑–¥–∞–Ω–∏–µ)
     * 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private String getPlayerIdForSession(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ playerId –≤ —Å–µ—Å—Å–∏–∏
        String playerId = (String) session.getAttribute("wordle_player_id");
        
        if (playerId != null && !playerId.isEmpty()) {
            // PlayerId —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
            return playerId;
        }
        
        // PlayerId –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ PersistentPlayerIdService
        playerId = persistentPlayerIdService.getOrCreatePlayerId(request, response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        session.setAttribute("wordle_player_id", playerId);
        
        return playerId;
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã
     */
    @GetMapping("/")
    public String index(@RequestParam(required = false) String word_id, Model model, HttpSession session, HttpServletRequest request, HttpServletResponse response) {
        GameState gameState = (GameState) session.getAttribute("gameState");
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω word_id, —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
        if (word_id != null && !word_id.isEmpty()) {
            String friendWord = friendGameService.getFriendWord(word_id);
            if (friendWord != null) {
                // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ —Ä–µ–∂–∏–º–µ GUESS —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
                gameState = new GameState(friendWord, GameMode.GUESS);
                gameState.setPlayerId(getPlayerIdForSession(request, response, session));
                gameState.setFriendGame(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
                session.setAttribute("gameState", gameState);
                
                System.out.println("üéØ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º –ø–æ —Å–ª–æ–≤—É: " + friendWord + " (ID: " + word_id + ")");
                
                model.addAttribute("gameState", gameState);
                model.addAttribute("todayDate", dailyWordService.getTodayDateString());
                model.addAttribute("gameNumber", dailyWordService.getTodayGameNumber());
                model.addAttribute("playerId", gameState.getPlayerId());
                model.addAttribute("friendGame", true);
                model.addAttribute("friendWordId", word_id);
                model.addAttribute("appDomain", appDomain);
                
                // –ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º —Å–æ–∑–¥–∞–Ω–∞
                
                return "index";
            } else {
                System.out.println("‚ùå –ò–≥—Ä–∞ —Å ID " + word_id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                model.addAttribute("error", "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞");
            }
        }
        
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (gameState == null) {
            // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º ID –∏–≥—Ä–æ–∫–∞
            String playerId = getPlayerIdForSession(request, response, session);
            gameState = wordleService.createGame(GameMode.DAILY, session);
            gameState.setPlayerId(playerId);
            session.setAttribute("gameState", gameState);
            
            System.out.println("üéÆ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞: " + playerId);
        }
        
        model.addAttribute("gameState", gameState);
        model.addAttribute("todayDate", dailyWordService.getTodayDateString());
        model.addAttribute("gameNumber", dailyWordService.getTodayGameNumber());
        model.addAttribute("playerId", gameState.getPlayerId());
        model.addAttribute("appDomain", appDomain);
        return "index";
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ (REST API)
     */
    @PostMapping("/api/guess")
    @ResponseBody
    public Map<String, Object> makeGuessApi(@RequestParam String word, @RequestParam(required = false) Integer gameTimeSeconds, HttpSession session, HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> responseMap = new HashMap<>();
        GameState gameState = (GameState) session.getAttribute("gameState");
        
        if (gameState == null) {
            String playerId = getPlayerIdForSession(request, response, session);
            gameState = wordleService.createNewGame(session);
            gameState.setPlayerId(playerId);
            session.setAttribute("gameState", gameState);
        }
        
        try {
            System.out.println("Received guess: " + word);
            System.out.println("Current game state: " + (gameState != null ? gameState.getGameMode() : "null"));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if (gameTimeSeconds != null) {
                gameState.setGameTimeSeconds(gameTimeSeconds);
            }
            
            if (word.length() != 5) {
                responseMap.put("success", false);
                responseMap.put("error", "–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –±—É–∫–≤");
            } else if (!wordleService.isValidWord(word, gameState)) {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ
                responseMap.put("success", false);
                responseMap.put("error", "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ");
            } else {
                // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                WordGuess guess = wordleService.processGuess(word, gameState);
                responseMap.put("success", true);
                responseMap.put("gameState", gameState);
                responseMap.put("lastGuess", guess);
                System.out.println("Guess processed successfully");
            }
        } catch (IllegalStateException e) {
            System.err.println("IllegalStateException: " + e.getMessage());
            e.printStackTrace();
            responseMap.put("success", false);
            responseMap.put("error", e.getMessage());
        } catch (Exception e) {
            System.err.println("Exception in makeGuessApi: " + e.getMessage());
            e.printStackTrace();
            responseMap.put("success", false);
            responseMap.put("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
        
        return responseMap;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ (–¥–ª—è —Ñ–æ—Ä–º—ã)
     */
    @PostMapping("/guess")
    public String makeGuess(@RequestParam String word, HttpSession session, Model model, HttpServletRequest request, HttpServletResponse response) {
        GameState gameState = (GameState) session.getAttribute("gameState");
        
        if (gameState == null) {
            String playerId = getPlayerIdForSession(request, response, session);
            gameState = wordleService.createNewGame(session);
            gameState.setPlayerId(playerId);
            session.setAttribute("gameState", gameState);
        }
        
        try {
            if (word.length() != 5) {
                model.addAttribute("error", "–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –±—É–∫–≤");
            } else if (!wordleService.isValidWord(word, gameState)) {
                model.addAttribute("error", "–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã");
            } else {
                WordGuess guess = wordleService.processGuess(word, gameState);
                model.addAttribute("lastGuess", guess);
            }
        } catch (IllegalStateException e) {
            model.addAttribute("error", e.getMessage());
        }
        
        model.addAttribute("gameState", gameState);
        return "index";
    }
    
    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
     */
    @PostMapping("/new-game")
    public String newGame(HttpSession session, HttpServletRequest request, HttpServletResponse response) {
        GameState currentGame = (GameState) session.getAttribute("gameState");
        GameMode currentMode = (currentGame != null) ? currentGame.getGameMode() : GameMode.DAILY;
        
        // –ü–æ–ª—É—á–∞–µ–º playerId –¥–ª—è —Å–µ—Å—Å–∏–∏
        String playerId = getPlayerIdForSession(request, response, session);
        
        GameState newGame = wordleService.createGame(currentMode, session);
        newGame.setPlayerId(playerId); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID
        session.setAttribute("gameState", newGame);
        
        System.out.println("üîÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞: " + playerId);
        return "redirect:/";
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã
     */
    @PostMapping("/switch-mode")
    public String switchMode(@RequestParam String mode, HttpSession session, HttpServletRequest request, HttpServletResponse response) {
        try {
            System.out.println("Switching mode to: " + mode);
            GameMode gameMode = GameMode.valueOf(mode.toUpperCase());
            
            // –ü–æ–ª—É—á–∞–µ–º playerId –¥–ª—è —Å–µ—Å—Å–∏–∏
            String playerId = getPlayerIdForSession(request, response, session);
            
            GameState newGame = wordleService.createGame(gameMode, session);
            newGame.setPlayerId(playerId); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID
            session.setAttribute("gameState", newGame);
            
            System.out.println("Mode switched successfully to: " + gameMode + " for player: " + playerId);
            return "redirect:/";
        } catch (Exception e) {
            System.err.println("Error switching mode: " + e.getMessage());
            e.printStackTrace();
            return "redirect:/";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
     */
    @GetMapping("/hint")
    @ResponseBody
    public String getHint(HttpSession session) {
        GameState gameState = (GameState) session.getAttribute("gameState");
        if (gameState != null) {
            return gameState.getTargetWord();
        }
        return "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
    }
    
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞
     */
    @GetMapping("/status")
    @ResponseBody
    public ResponseEntity<Map<String, String>> status() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Wordle Game is running!");
        response.put("status", "UP");
        response.put("timestamp", String.valueOf(System.currentTimeMillis()));
        response.put("dictionary", wordleService.getDictionaryStats());
        return ResponseEntity.ok(response);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
     */
    @GetMapping("/api/stats/daily")
    @ResponseBody
    public ResponseEntity<DailyStats> getDailyStats() {
        try {
            DailyStats stats = wordleService.getDailyStats();
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            System.err.println("Error getting daily stats: " + e.getMessage());
            return ResponseEntity.status(500).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    @GetMapping("/api/stats/daily/player/{playerId}")
    @ResponseBody
    public ResponseEntity<DailyStats> getDailyStatsWithPlayer(@PathVariable String playerId) {
        try {
            DailyStats stats = wordleService.getDailyStatsWithPlayerResult(playerId);
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            System.err.println("Error getting daily stats for player: " + e.getMessage());
            return ResponseEntity.status(500).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
     */
    @GetMapping("/api/stats/recent")
    @ResponseBody
    public ResponseEntity<List<DailyStats>> getRecentStats(@RequestParam(defaultValue = "7") int days) {
        try {
            List<DailyStats> stats = wordleService.getRecentStats(days);
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            System.err.println("Error getting recent stats: " + e.getMessage());
            return ResponseEntity.status(500).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–Ω—è
     */
    @GetMapping("/api/stats/player-rank")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getPlayerRank(@RequestParam String playerId) {
        try {
            DailyStats stats = wordleService.getDailyStatsWithPlayerResult(playerId);
            Map<String, Object> response = new HashMap<>();
            
            if (stats.getPlayerResult() != null && stats.getPlayerResult().isSuccess()) {
                response.put("success", true);
                response.put("rank", stats.getPlayerResult().getRank());
                response.put("attempts", stats.getPlayerResult().getAttempts());
            } else {
                response.put("success", false);
                response.put("message", "–ò–≥—Ä–æ–∫ –Ω–µ —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è");
            }
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error getting player rank: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞");
            return ResponseEntity.status(500).body(errorResponse);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    @GetMapping("/api/stats/info")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getStatsInfo() {
        try {
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("info", wordleService.getStatsInfo());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error getting stats info: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ");
            return ResponseEntity.status(500).body(errorResponse);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
     */
    @PostMapping("/api/friend/save-word")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> saveFriendWord(@RequestParam String word) {
        try {
            Map<String, Object> response = new HashMap<>();
            
            if (word == null || word.length() != 5) {
                response.put("success", false);
                response.put("error", "–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –±—É–∫–≤");
                return ResponseEntity.badRequest().body(response);
            }
            
            String wordId = friendGameService.saveFriendWord(word);
            response.put("success", true);
            response.put("word_id", wordId);
            
            System.out.println("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º: " + word + " (ID: " + wordId + ")");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error saving friend word: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞");
            return ResponseEntity.status(500).body(errorResponse);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @GetMapping("/api/config")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getAppConfig() {
        try {
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("domain", appDomain);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error getting app config: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return ResponseEntity.status(500).body(errorResponse);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –¥–æ–º–µ–Ω–æ–º
     */
    @GetMapping("/images/wordle-preview.svg")
    @ResponseBody
    public ResponseEntity<String> getWordlePreview() {
        try {
            String domain = appDomain.replace("https://", "").replace("http://", "");
            String svg = generateWordlePreviewSvg(domain);
            
            return ResponseEntity.ok()
                    .header("Content-Type", "image/svg+xml")
                    .body(svg);
        } catch (Exception e) {
            System.err.println("Error generating preview: " + e.getMessage());
            return ResponseEntity.status(500).body("Error generating preview");
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏
     */
    @GetMapping("/images/wordle-friend-game.svg")
    @ResponseBody
    public ResponseEntity<String> getFriendGamePreview() {
        try {
            String domain = appDomain.replace("https://", "").replace("http://", "");
            String svg = generateFriendGamePreviewSvg(domain);
            
            return ResponseEntity.ok()
                    .header("Content-Type", "image/svg+xml")
                    .body(svg);
        } catch (Exception e) {
            System.err.println("Error generating friend game preview: " + e.getMessage());
            return ResponseEntity.status(500).body("Error generating preview");
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG –¥–ª—è –ø—Ä–µ–≤—å—é Wordle
     */
    private String generateWordlePreviewSvg(String domain) {
        return String.format("""
            <svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
              <defs>
                <linearGradient id="bg" x1="0%%" y1="0%%" x2="100%%" y2="100%%">
                  <stop offset="0%%" style="stop-color:#667eea;stop-opacity:1" />
                  <stop offset="100%%" style="stop-color:#764ba2;stop-opacity:1" />
                </linearGradient>
              </defs>
              
              <rect width="1200" height="630" fill="url(#bg)"/>
              
              <text x="600" y="200" font-family="Arial, sans-serif" font-size="80" font-weight="bold" text-anchor="middle" fill="white">WORDLE</text>
              <text x="600" y="280" font-family="Arial, sans-serif" font-size="32" text-anchor="middle" fill="white">–†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è</text>
              <text x="600" y="350" font-family="Arial, sans-serif" font-size="24" text-anchor="middle" fill="white">–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫</text>
              
              <g transform="translate(400, 400)">
                <rect x="0" y="0" width="60" height="60" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="30" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">–°</text>
                <rect x="70" y="0" width="60" height="60" fill="#c9b458" stroke="#d3d6da" stroke-width="2"/>
                <text x="100" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">–õ</text>
                <rect x="140" y="0" width="60" height="60" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="170" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">–û</text>
                <rect x="210" y="0" width="60" height="60" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="240" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">–í</text>
                <rect x="280" y="0" width="60" height="60" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="310" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">–û</text>
              </g>
              
              <text x="600" y="550" font-family="Arial, sans-serif" font-size="20" text-anchor="middle" fill="white" opacity="0.8">%s</text>
            </svg>
            """, domain);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG –¥–ª—è –ø—Ä–µ–≤—å—é –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏
     */
    private String generateFriendGamePreviewSvg(String domain) {
        return String.format("""
            <svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
              <defs>
                <linearGradient id="bg" x1="0%%" y1="0%%" x2="100%%" y2="100%%">
                  <stop offset="0%%" style="stop-color:#ff6b6b;stop-opacity:1" />
                  <stop offset="100%%" style="stop-color:#ee5a24;stop-opacity:1" />
                </linearGradient>
              </defs>
              
              <rect width="1200" height="630" fill="url(#bg)"/>
              
              <text x="600" y="180" font-family="Arial, sans-serif" font-size="70" font-weight="bold" text-anchor="middle" fill="white">üë• –ò–ì–†–ê –° –î–†–£–ì–û–ú</text>
              <text x="600" y="250" font-family="Arial, sans-serif" font-size="36" text-anchor="middle" fill="white">–¢–≤–æ–π –¥—Ä—É–≥ –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!</text>
              <text x="600" y="320" font-family="Arial, sans-serif" font-size="28" text-anchor="middle" fill="white">–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å –µ–≥–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫</text>
              
              <g transform="translate(400, 380)">
                <rect x="0" y="0" width="50" height="50" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="25" y="35" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="white">?</text>
                <rect x="60" y="0" width="50" height="50" fill="#c9b458" stroke="#d3d6da" stroke-width="2"/>
                <text x="85" y="35" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="white">?</text>
                <rect x="120" y="0" width="50" height="50" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="145" y="35" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="white">?</text>
                <rect x="180" y="0" width="50" height="50" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="205" y="35" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="white">?</text>
                <rect x="240" y="0" width="50" height="50" fill="#6aaa64" stroke="#d3d6da" stroke-width="2"/>
                <text x="265" y="35" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="white">?</text>
              </g>
              
              <text x="600" y="500" font-family="Arial, sans-serif" font-size="24" text-anchor="middle" fill="white" font-weight="bold">–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!</text>
              <text x="600" y="550" font-family="Arial, sans-serif" font-size="18" text-anchor="middle" fill="white" opacity="0.8">%s</text>
            </svg>
            """, domain);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
     */
    @GetMapping("/api/player/info")
    @ResponseBody
    public Map<String, Object> getPlayerInfo(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();
        String playerId = persistentPlayerIdService.getExistingPlayerId(request);
        String playerName = persistentPlayerIdService.getPlayerName(request);
        
        response.put("playerId", playerId);
        response.put("playerName", playerName);
        response.put("hasPlayer", playerId != null);
        
        return response;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞
     */
    @PostMapping("/api/player/set-name")
    @ResponseBody
    public Map<String, Object> setPlayerName(@RequestParam String name, HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> responseMap = new HashMap<>();
        
        if (name == null || name.trim().isEmpty()) {
            responseMap.put("success", false);
            responseMap.put("message", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            return responseMap;
        }
        
        persistentPlayerIdService.setPlayerName(request, response, name);
        responseMap.put("success", true);
        responseMap.put("message", "–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + name.trim());
        responseMap.put("playerName", name.trim());
        
        return responseMap;
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç ID –∏–≥—Ä–æ–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    @PostMapping("/api/player/reset")
    @ResponseBody
    public Map<String, Object> resetPlayer(HttpServletRequest request, HttpServletResponse response) {
        persistentPlayerIdService.resetPlayerId(request, response);
        
        Map<String, Object> responseMap = new HashMap<>();
        responseMap.put("success", true);
        responseMap.put("message", "ID –∏–≥—Ä–æ–∫–∞ —Å–±—Ä–æ—à–µ–Ω (—Å–µ—Å—Å–∏—è + cookie)");
        
        return responseMap;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ cookies –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    @GetMapping("/api/player/cookie-info")
    @ResponseBody
    public Map<String, Object> getCookieInfo(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();
        String cookieInfo = persistentPlayerIdService.getPlayerCookieInfo(request);
        response.put("cookieInfo", cookieInfo);
        return response;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω—è
     */
    @GetMapping("/api/daily-game/can-play")
    @ResponseBody
    public Map<String, Object> canPlayDailyGame(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();
        String playerId = persistentPlayerIdService.getExistingPlayerId(request);
        
        if (playerId == null) {
            response.put("canPlay", false);
            response.put("reason", "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return response;
        }
        
        boolean canPlay = wordleService.canPlayerPlayToday(playerId);
        response.put("canPlay", canPlay);
        
        if (!canPlay) {
            response.put("reason", wordleService.getPlayRestrictionReason(playerId));
        }
        
        return response;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    @GetMapping("/api/daily-game/today-stats")
    @ResponseBody
    public Map<String, Object> getTodayPlayerStats(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();
        String playerId = persistentPlayerIdService.getExistingPlayerId(request);
        
        if (playerId == null) {
            response.put("error", "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return response;
        }
        
        String stats = wordleService.getTodayPlayerStats(playerId);
        response.put("stats", stats);
        
        return response;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä—ã
     */
    @GetMapping("/api/daily-game/time-info")
    @ResponseBody
    public Map<String, Object> getTimeInfo() {
        Map<String, Object> response = new HashMap<>();
        String timeInfo = wordleService.getTimeInfo();
        response.put("timeInfo", timeInfo);
        return response;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
     */
    @GetMapping("/api/debug/timezone")
    @ResponseBody
    public Map<String, Object> getTimezoneDebugInfo() {
        Map<String, Object> response = new HashMap<>();
        
        // –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        String moscowTimeInfo = wordleService.getTimeInfo();
        response.put("moscowTimeInfo", moscowTimeInfo);
        
        // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response.put("systemTimezone", java.time.ZoneId.systemDefault().toString());
        response.put("defaultTimeZone", java.util.TimeZone.getDefault().getID());
        
        // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        response.put("utcTime", java.time.Instant.now().toString());
        response.put("localTime", java.time.LocalDateTime.now().toString());
        response.put("moscowTime", java.time.LocalDateTime.now(java.time.ZoneId.of("Europe/Moscow")).toString());
        
        return response;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ target word)
     */
    @GetMapping("/api/debug/stats")
    @ResponseBody
    public Map<String, Object> getStatsDebugInfo() {
        Map<String, Object> response = new HashMap<>();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–Ω—è
        String todayWord = dailyWordService.getTodayWord();
        response.put("todayWord", todayWord);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
        try {
            DailyStats dailyStats = wordleService.getDailyStats();
            response.put("dailyStats", dailyStats);
            response.put("success", true);
        } catch (Exception e) {
            response.put("success", false);
            response.put("error", e.getMessage());
        }
        
        return response;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞)
     */
    @GetMapping("/api/debug/player")
    @ResponseBody
    public Map<String, Object> getPlayerDebugInfo(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> responseMap = new HashMap<>();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ
        String playerId = persistentPlayerIdService.getExistingPlayerId(request);
        String playerName = persistentPlayerIdService.getPlayerName(request);
        boolean hasPlayer = persistentPlayerIdService.hasPlayer(request);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–∫–∏
        String cookieInfo = persistentPlayerIdService.getPlayerCookieInfo(request);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        HttpSession session = request.getSession(false);
        String sessionPlayerId = null;
        if (session != null) {
            sessionPlayerId = (String) session.getAttribute("wordle_player_id");
        }
        
        responseMap.put("playerId", playerId);
        responseMap.put("playerName", playerName);
        responseMap.put("hasPlayer", hasPlayer);
        responseMap.put("sessionPlayerId", sessionPlayerId);
        responseMap.put("cookieInfo", cookieInfo);
        responseMap.put("sessionExists", session != null);
        responseMap.put("sessionId", session != null ? session.getId() : "No session");
        
        return responseMap;
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    @PostMapping("/api/debug/create-player")
    @ResponseBody
    public Map<String, Object> createNewPlayer(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> responseMap = new HashMap<>();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        persistentPlayerIdService.resetPlayerId(request, response);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        String newPlayerId = persistentPlayerIdService.getOrCreatePlayerId(request, response);
        
        responseMap.put("success", true);
        responseMap.put("message", "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫");
        responseMap.put("playerId", newPlayerId);
        
        return responseMap;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
     */
    @GetMapping("/api/stats/player")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getPlayerStats(HttpServletRequest request) {
        try {
            String playerId = persistentPlayerIdService.getExistingPlayerId(request);
            
            if (playerId == null) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("success", false);
                errorResponse.put("message", "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.status(404).body(errorResponse);
            }
            
            PlayerStatsEntity playerStats = playerStatsService.getPlayerStats(playerId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("playerStats", playerStats);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error getting player stats: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞");
            return ResponseEntity.status(500).body(errorResponse);
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
     */
    @PostMapping("/api/stats/player/recalculate")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> recalculatePlayerStats(HttpServletRequest request) {
        try {
            String playerId = persistentPlayerIdService.getExistingPlayerId(request);
            
            if (playerId == null) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("success", false);
                errorResponse.put("message", "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.status(404).body(errorResponse);
            }
            
            playerStatsService.recalculatePlayerStats(playerId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error recalculating player stats: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            return ResponseEntity.status(500).body(errorResponse);
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    @PostMapping("/api/stats/migrate")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> migratePlayerStats() {
        try {
            if (!playerStatsMigrationService.needsMigration()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ - –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
                return ResponseEntity.ok(response);
            }
            
            playerStatsMigrationService.migratePlayerStats();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–ú–∏–≥—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("Error migrating player stats: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: " + e.getMessage());
            return ResponseEntity.status(500).body(errorResponse);
        }
    }

}
