package org.example.wordle.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Base64;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.UUID;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏
 */
@Service
public class FriendGameService {

    @Autowired
    private LocalTimeService localTimeService;

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä —Å –¥—Ä—É–∑—å—è–º–∏: word_id -> –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    private final Map<String, String> friendGames = new ConcurrentHashMap<>();
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: word_id -> –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    private final Map<String, LocalDateTime> gameTimestamps = new ConcurrentHashMap<>();

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
     * @param word –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
     * @return word_id –¥–ª—è —Å—Å—ã–ª–∫–∏
     */
    public String saveFriendWord(String word) {
        if (word == null || word.length() != 5) {
            throw new IllegalArgumentException("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –±—É–∫–≤");
        }
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ª–æ–≤–∞
        String wordId = generateWordId(word);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        friendGames.put(wordId, word.toUpperCase());
        gameTimestamps.put(wordId, localTimeService.getCurrentMoscowDateTime());
        
        System.out.println("üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º: " + word.toUpperCase() + " (ID: " + wordId + ")");
        
        return wordId;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ word_id
     * @param wordId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞
     * @return –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
     */
    public String getFriendWord(String wordId) {
        if (wordId == null || wordId.isEmpty()) {
            return null;
        }
        
        String word = friendGames.get(wordId);
        if (word != null) {
            System.out.println("üîç –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º: " + word + " (ID: " + wordId + ")");
        } else {
            System.out.println("‚ùå –°–ª–æ–≤–æ —Å ID " + wordId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }
        
        return word;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º word_id
     * @param wordId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞
     * @return true –µ—Å–ª–∏ –∏–≥—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    public boolean isFriendGameExists(String wordId) {
        return wordId != null && friendGames.containsKey(wordId);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
     * @param wordId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞
     * @return –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ null
     */
    public LocalDateTime getGameTimestamp(String wordId) {
        return gameTimestamps.get(wordId);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ª–æ–≤–∞
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é UUID –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
     */
    private String generateWordId(String word) {
        // –°–æ–∑–¥–∞–µ–º UUID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        String uuid = UUID.randomUUID().toString().replace("-", "");
        
        // –ö–æ–¥–∏—Ä—É–µ–º —Å–ª–æ–≤–æ –≤ Base64 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        String encodedWord = Base64.getEncoder().encodeToString(word.getBytes());
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ UUID + –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        String shortUuid = uuid.substring(0, 8);
        String shortEncoded = encodedWord.substring(0, 8);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        return shortUuid + shortEncoded;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä —Å –¥—Ä—É–∑—å—è–º–∏
     */
    public String getFriendGamesStats() {
        int totalGames = friendGames.size();
        return "–í—Å–µ–≥–æ –∏–≥—Ä —Å –¥—Ä—É–∑—å—è–º–∏: " + totalGames;
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
     */
    public void cleanupOldGames() {
        LocalDateTime cutoff = localTimeService.getCurrentMoscowDateTime().minusDays(7);
        int removedCount = 0;
        
        gameTimestamps.entrySet().removeIf(entry -> {
            if (entry.getValue().isBefore(cutoff)) {
                friendGames.remove(entry.getKey());
                return true;
            }
            return false;
        });
        
        System.out.println("üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä —Å –¥—Ä—É–∑—å—è–º–∏: " + removedCount);
    }
}
