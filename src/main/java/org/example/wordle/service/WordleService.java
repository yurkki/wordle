package org.example.wordle.service;

import org.example.wordle.model.*;
import org.example.wordle.repository.WordsRepository;
import org.springframework.stereotype.Service;

import jakarta.servlet.http.HttpSession;
import java.time.LocalDate;
import java.util.List;


/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã Wordle
 */
@Service
public class WordleService {

    private final WordsRepository wordsRepository;
    private final DailyWordService dailyWordService;
    private final DictionaryApiService dictionaryApiService;
    private final StatsService statsService;
    private final PlayerIdService playerIdService;
    private final LocalTimeService localTimeService;

    public WordleService(WordsRepository wordsRepository, 
                        DailyWordService dailyWordService,
                        DictionaryApiService dictionaryApiService,
                        StatsService statsService,
                        PlayerIdService playerIdService,
                        LocalTimeService localTimeService) {
        this.wordsRepository = wordsRepository;
        this.dailyWordService = dailyWordService;
        this.dictionaryApiService = dictionaryApiService;
        this.statsService = statsService;
        this.playerIdService = playerIdService;
        this.localTimeService = localTimeService;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–ª–æ–≤–æ–º –≤ —Ä–µ–∂–∏–º–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
     * –°–ª–æ–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
     */
    public GameState createNewGame(HttpSession session) {
        String targetWord = getValidRandomWord();
        GameState gameState = new GameState(targetWord, GameMode.GUESS);
        gameState.setPlayerId(playerIdService.getOrCreatePlayerId(session));
        return gameState;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —Ä–µ–∂–∏–º–µ —Å–ª–æ–≤–∞ –¥–Ω—è
     */
    public GameState createDailyGame(HttpSession session) {
        String targetWord = dailyWordService.getTodayWord();
        GameState gameState = new GameState(targetWord, GameMode.DAILY);
        gameState.setPlayerId(playerIdService.getOrCreatePlayerId(session));
        return gameState;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    public GameState createGame(GameMode mode, HttpSession session) {
        if (mode == GameMode.DAILY) {
            return createDailyGame(session);
        } else {
            return createNewGame(session);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω—ã–º (—á–µ—Ä–µ–∑ API —Å–ª–æ–≤–∞—Ä–∏ —Å fallback)
     */
    public boolean isValidWord(String word) {
        if (word == null || word.length() != 5) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞
        if (!word.matches("[–∞-—è–ê-–Ø—ë–Å]{5}")) {
            return false;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Å–µ—Ä–≤–∏—Å —Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        return dictionaryApiService.isWordValid(word);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
     * –í —Ä–µ–∂–∏–º–µ "–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º" –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API –æ—Ç–∫–ª—é—á–µ–Ω–∞
     */
    public boolean isValidWord(String word, GameState gameState) {
        if (word == null || word.length() != 5) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞
        if (!word.matches("[–∞-—è–ê-–Ø—ë–Å]{5}")) {
            return false;
        }
        
        // –í —Ä–µ–∂–∏–º–µ "–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º" –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
        if (gameState.getGameMode() == GameMode.GUESS && gameState.isFriendGame()) {
            System.out.println("üéØ –†–µ–∂–∏–º '–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º': –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å–ª–æ–≤–∞: " + word);
            return true; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ 5-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return dictionaryApiService.isWordValid(word);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –∑–∞–≥–∞–¥—ã–≤–∞–µ–º—ã–º —Å–ª–æ–≤–æ–º (–µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ)
     */
    public boolean isTargetWord(String word) {
        if (word == null || word.length() != 5) {
            return false;
        }
        
        String normalizedWord = normalizeWord(word);
        return wordsRepository.isTargetWord(normalizedWord);
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–æ, –∑–∞–º–µ–Ω—è—è —ë –Ω–∞ –µ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private String normalizeWord(String word) {
        return word.toUpperCase()
                .replace('–Å', '–ï')
                .replace('—ë', '–ï');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–µ –±—É–∫–≤—ã —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–º–∏ (–ï –∏ –Å —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏)
     */
    private boolean areEquivalentLetters(char letter1, char letter2) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–µ –±—É–∫–≤—ã –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        char norm1 = normalizeWord(String.valueOf(letter1)).charAt(0);
        char norm2 = normalizeWord(String.valueOf(letter2)).charAt(0);
        return norm1 == norm2;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ
     */
    public WordGuess processGuess(String guess, GameState gameState) {
        if (!gameState.canMakeGuess()) {
            throw new IllegalStateException("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }

        String upperGuess = guess.toUpperCase();
        String targetWord = gameState.getTargetWord();

        WordGuess wordGuess = new WordGuess(upperGuess);

        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
        for (int i = 0; i < 5; i++) {
            wordGuess.getLetters().get(i).setState(LetterState.ABSENT);
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±—É–∫–≤
        char[] targetChars = targetWord.toCharArray();
        boolean[] usedTargetChars = new boolean[5];

        // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –æ—Ç–º–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∑–µ–ª–µ–Ω—ã–µ)
        for (int i = 0; i < 5; i++) {
            char guessChar = upperGuess.charAt(i);
            if (guessChar == targetChars[i] || areEquivalentLetters(guessChar, targetChars[i])) {
                wordGuess.getLetters().get(i).setState(LetterState.CORRECT);
                usedTargetChars[i] = true;
            }
        }

        // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –æ—Ç–º–µ—á–∞–µ–º –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö (–∂–µ–ª—Ç—ã–µ)
        for (int i = 0; i < 5; i++) {
            char guessChar = upperGuess.charAt(i);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã
            if (wordGuess.getLetters().get(i).getState() == LetterState.CORRECT) {
                continue;
            }
            
            // –ò—â–µ–º —ç—Ç—É –±—É–∫–≤—É –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            for (int j = 0; j < 5; j++) {
                if (!usedTargetChars[j] && (targetChars[j] == guessChar || areEquivalentLetters(guessChar, targetChars[j]))) {
                    wordGuess.getLetters().get(i).setState(LetterState.PRESENT);
                    usedTargetChars[j] = true;
                    break; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–∫–≤—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –∏–≥—Ä—É
        gameState.addGuess(wordGuess);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –ï/–Å
        if (upperGuess.equals(targetWord) || normalizeWord(upperGuess).equals(normalizeWord(targetWord))) {
            gameState.setStatus(GameStatus.WON);
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–Ω—è
            if (gameState.getGameMode() == GameMode.DAILY) {
                recordGameStats(gameState, true);
            }
        } else if (gameState.getGuesses().size() >= 6) {
            gameState.setStatus(GameStatus.LOST);
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–Ω—è (–Ω–µ—É–¥–∞—á–Ω–∞—è –∏–≥—Ä–∞)
            if (gameState.getGameMode() == GameMode.DAILY) {
                recordGameStats(gameState, false);
            }
        }

        return wordGuess;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public String getRandomWord() {
        return wordsRepository.getRandomFiveLetterWord();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞—Ä—è
     */
    public String getDictionaryStats() {
        return String.format("API —Å–ª–æ–≤–∞—Ä–∏: %s", dictionaryApiService.getApiStatus());
    }
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
     */
    private boolean recordGameStats(GameState gameState, boolean success) {
        if (gameState.getGameMode() != GameMode.DAILY) {
            return false; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–Ω—è
        }
        
        int attempts = success ? gameState.getGuesses().size() : 0;
        String playerId = gameState.getPlayerId();
        int gameTimeSeconds = gameState.getGameTimeSeconds();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞—Ç—ã
        LocalDate gameDate = localTimeService.getCurrentMoscowDate();
        
        // –í–ê–ñ–ù–û: –î–ª—è —Ä–µ–∂–∏–º–∞ –¥–Ω—è –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–æ –¥–Ω—è, –∞ –Ω–µ targetWord –∏–∑ gameState
        // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞–ª —Å –¥—Ä—É–≥–æ–º, –Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
        // —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º
        String targetWord = dailyWordService.getTodayWord();

        return statsService.recordGameStats(
            gameDate,
            attempts,
            playerId,
            targetWord, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–æ –¥–Ω—è, –∞ –Ω–µ –∏–∑ gameState
            gameTimeSeconds
        );
    }
    
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
     */
    public DailyStats getDailyStats() {
        return statsService.getDailyStats(localTimeService.getCurrentMoscowDate());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public DailyStats getDailyStatsWithPlayerResult(String playerId) {
        return statsService.getDailyStatsWithPlayerResult(localTimeService.getCurrentMoscowDate(), playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
     */
    public List<DailyStats> getRecentStats(int days) {
        return statsService.getRecentStats(days);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public String getStatsInfo() {
        return statsService.getStatsInfo();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω—è
     */
    public boolean canPlayerPlayToday(String playerId) {
        return statsService.canPlayerPlayToday(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ—á–µ–º—É –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å
     */
    public String getPlayRestrictionReason(String playerId) {
        return statsService.getPlayRestrictionReason(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    public String getTodayPlayerStats(String playerId) {
        return statsService.getTodayPlayerStats(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä—ã
     */
    public String getTimeInfo() {
        return statsService.getTimeInfo();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
     * –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ
     */
    private String getValidRandomWord() {
        List<String> fiveLetterWords = wordsRepository.getFiveLetterWords();
        int maxAttempts = Math.min(50, fiveLetterWords.size()); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        System.out.println("–ü–æ–∏—Å–∫ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –£–ì–ê–î–´–í–ê–¢–¨...");
        
        for (int attempt = 0; attempt < maxAttempts; attempt++) {
            String candidateWord = wordsRepository.getRandomFiveLetterWord();
            
            System.out.println("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è: " + candidateWord + " (–ø–æ–ø—ã—Ç–∫–∞ " + (attempt + 1) + ")");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
            if (dictionaryApiService.isWordValid(candidateWord)) {
                System.out.println("–°–ª–æ–≤–æ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–æ: " + candidateWord + " (–≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API –ø—Ä–æ–π–¥–µ–Ω–∞)");
                return candidateWord;
            } else {
                System.out.println("–°–ª–æ–≤–æ " + candidateWord + " –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ");
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        String fallbackWord = wordsRepository.getRandomFiveLetterWord();
        System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: " + fallbackWord);
        return fallbackWord;
    }
}
