package org.example.wordle.service;

import org.example.wordle.model.GameStatsEntity;
import org.example.wordle.model.PlayerStatsEntity;
import org.example.wordle.repository.GameStatsRepository;
import org.example.wordle.repository.PlayerStatsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class PlayerStatsMigrationService {
    
    @Autowired
    private GameStatsRepository gameStatsRepository;
    
    @Autowired
    private PlayerStatsRepository playerStatsRepository;
    
    /**
     * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ game_stats –≤ player_stats
     */
    @Transactional
    public void migratePlayerStats() {
        System.out.println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞–ª–∏
        List<GameStatsEntity> allGames = gameStatsRepository.findAll();
        Map<String, List<GameStatsEntity>> gamesByPlayer = allGames.stream()
                .collect(Collectors.groupingBy(GameStatsEntity::getPlayerId));
        
        System.out.println("üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: " + gamesByPlayer.size());
        
        int migratedCount = 0;
        
        for (Map.Entry<String, List<GameStatsEntity>> entry : gamesByPlayer.entrySet()) {
            String playerId = entry.getKey();
            List<GameStatsEntity> playerGames = entry.getValue();
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ
            playerGames.sort((a, b) -> a.getGameDate().compareTo(b.getGameDate()));
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            PlayerStatsEntity playerStats = createOrUpdatePlayerStats(playerId, playerGames);
            playerStatsRepository.save(playerStats);
            
            migratedCount++;
            System.out.println("‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ " + playerId + 
                             " (–∏–≥—Ä: " + playerGames.size() + ")");
        }
        
        System.out.println("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: " + migratedCount);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–≥—Ä
     */
    private PlayerStatsEntity createOrUpdatePlayerStats(String playerId, List<GameStatsEntity> games) {
        PlayerStatsEntity stats = new PlayerStatsEntity(playerId);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        int totalGames = games.size();
        int totalWins = (int) games.stream().filter(GameStatsEntity::isSuccess).count();
        int totalAttempts = games.stream().mapToInt(GameStatsEntity::getAttempts).sum();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        BigDecimal winRate = totalGames > 0 ? 
            BigDecimal.valueOf(totalWins)
                .multiply(BigDecimal.valueOf(100))
                .divide(BigDecimal.valueOf(totalGames), 2, RoundingMode.HALF_UP) :
            BigDecimal.ZERO;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        BigDecimal averageAttempts = totalGames > 0 ?
            BigDecimal.valueOf(totalAttempts)
                .divide(BigDecimal.valueOf(totalGames), 2, RoundingMode.HALF_UP) :
            BigDecimal.ZERO;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫–∏
        int currentStreak = 0;
        int maxStreak = 0;
        LocalDate lastGameDate = null;
        
        for (GameStatsEntity game : games) {
            if (game.isSuccess()) {
                // –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–Ω–µ–π)
                currentStreak++;
                
                if (currentStreak > maxStreak) {
                    maxStreak = currentStreak;
                }
            } else {
                // –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –æ–±–Ω—É–ª—è–µ–º —Å—Ç—Ä–∏–∫
                currentStreak = 0;
            }
            
            lastGameDate = game.getGameDate();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        stats.setTotalGames(totalGames);
        stats.setTotalWins(totalWins);
        stats.setWinRate(winRate);
        stats.setCurrentStreak(currentStreak);
        stats.setMaxStreak(maxStreak);
        stats.setAverageAttempts(averageAttempts);
        stats.setLastGameDate(lastGameDate);
        
        return stats;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
     */
    public boolean needsMigration() {
        long playerStatsCount = playerStatsRepository.count();
        long gameStatsCount = gameStatsRepository.count();
        
        // –ï—Å–ª–∏ –≤ player_stats –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –∞ –≤ game_stats –µ—Å—Ç—å - –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è
        return playerStatsCount == 0 && gameStatsCount > 0;
    }
}
