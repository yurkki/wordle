package org.example.wordle.service;

import org.springframework.stereotype.Service;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.util.UUID;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies
 */
@Service
public class PersistentPlayerIdService {
    
    private static final String PLAYER_ID_COOKIE_NAME = "wordle_player_id";
    private static final String PLAYER_NAME_COOKIE_NAME = "wordle_player_name";
    private static final String PLAYER_ID_SESSION_KEY = "wordle_player_id";
    private static final String PLAYER_NAME_SESSION_KEY = "wordle_player_name";
    
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ cookie –≤ –¥–Ω—è—Ö (10 –ª–µ—Ç = –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ—á–Ω–æ)
    private static final int COOKIE_MAX_AGE = 10 * 365 * 24 * 60 * 60;
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ö–µ–º—É –∑–∞–ø—Ä–æ—Å–∞ (http/https)
     */
    private String getRequestScheme() {
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å HTTP
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        String forwardedProto = System.getenv("RAILWAY_ENVIRONMENT");
        if (forwardedProto != null) {
            return "https"; // Railway –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
        }
        return "http"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞
     * –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç cookie, –∑–∞—Ç–µ–º —Å–µ—Å—Å–∏—é, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
     */
    public String getOrCreatePlayerId(HttpServletRequest request, HttpServletResponse response) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie
        String playerId = getPlayerIdFromCookie(request);
        
        if (playerId != null && !playerId.isEmpty()) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            HttpSession session = request.getSession();
            session.setAttribute(PLAYER_ID_SESSION_KEY, playerId);
            System.out.println("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–≥—Ä–æ–∫ –∏–∑ cookie: " + playerId);
            return playerId;
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        HttpSession session = request.getSession();
        playerId = (String) session.getAttribute(PLAYER_ID_SESSION_KEY);
        
        if (playerId != null && !playerId.isEmpty()) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            setPlayerIdCookie(response, playerId);
            return playerId;
        }
        
        // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID
        playerId = generateUniquePlayerId();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –∏ cookie
        session.setAttribute(PLAYER_ID_SESSION_KEY, playerId);
        setPlayerIdCookie(response, playerId);
        
        System.out.println("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–≥—Ä–æ–∫: " + playerId);
        return playerId;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∏–≥—Ä–æ–∫–∞
     */
    public String getExistingPlayerId(HttpServletRequest request) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é (–±—ã—Å—Ç—Ä–µ–µ)
        HttpSession session = request.getSession(false);
        if (session != null) {
            String playerId = (String) session.getAttribute(PLAYER_ID_SESSION_KEY);
            if (playerId != null) {
                return playerId;
            }
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º cookie
        return getPlayerIdFromCookie(request);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞
     */
    public void setPlayerName(HttpServletRequest request, HttpServletResponse response, String playerName) {
        if (playerName != null && !playerName.trim().isEmpty()) {
            String trimmedName = playerName.trim();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            HttpSession session = request.getSession();
            session.setAttribute(PLAYER_NAME_SESSION_KEY, trimmedName);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie
            setPlayerNameCookie(response, trimmedName);
            
            System.out.println("üë§ –ò–≥—Ä–æ–∫ " + getExistingPlayerId(request) + " —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–º—è: " + trimmedName);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞
     */
    public String getPlayerName(HttpServletRequest request) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        HttpSession session = request.getSession(false);
        if (session != null) {
            String playerName = (String) session.getAttribute(PLAYER_NAME_SESSION_KEY);
            if (playerName != null) {
                return playerName;
            }
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º cookie
        return getPlayerNameFromCookie(request);
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç ID –∏–≥—Ä–æ–∫–∞ (—É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ cookie)
     */
    public void resetPlayerId(HttpServletRequest request, HttpServletResponse response) {
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.removeAttribute(PLAYER_ID_SESSION_KEY);
            session.removeAttribute(PLAYER_NAME_SESSION_KEY);
        }
        
        // –û—á–∏—â–∞–µ–º cookies
        clearPlayerIdCookie(response);
        clearPlayerNameCookie(response);
        
        System.out.println("üîÑ ID –∏–≥—Ä–æ–∫–∞ —Å–±—Ä–æ—à–µ–Ω (—Å–µ—Å—Å–∏—è + cookie)");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫
     */
    public boolean hasPlayer(HttpServletRequest request) {
        return getExistingPlayerId(request) != null;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç ID –∏–≥—Ä–æ–∫–∞ –∏–∑ cookie
     */
    private String getPlayerIdFromCookie(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (PLAYER_ID_COOKIE_NAME.equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ cookie
     */
    private String getPlayerNameFromCookie(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (PLAYER_NAME_COOKIE_NAME.equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cookie —Å ID –∏–≥—Ä–æ–∫–∞
     */
    private void setPlayerIdCookie(HttpServletResponse response, String playerId) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Secure —Ñ–ª–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞
        String requestScheme = getRequestScheme();
        boolean isSecure = "https".equals(requestScheme);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º cookie header
        String cookieValue = String.format("%s=%s; Max-Age=%d; Path=%s; HttpOnly; %s; SameSite=Lax",
            PLAYER_ID_COOKIE_NAME, playerId, COOKIE_MAX_AGE, "/", 
            isSecure ? "Secure" : "");
        
        // –î–æ–±–∞–≤–ª—è–µ–º cookie header
        response.addHeader("Set-Cookie", cookieValue);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cookie —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
     */
    private void setPlayerNameCookie(HttpServletResponse response, String playerName) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Secure —Ñ–ª–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞
        String requestScheme = getRequestScheme();
        boolean isSecure = "https".equals(requestScheme);
        
        // –î–æ–±–∞–≤–ª—è–µ–º SameSite –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
        response.addHeader("Set-Cookie", 
            String.format("%s=%s; Max-Age=%d; Path=%s; %s; SameSite=Lax",
                PLAYER_NAME_COOKIE_NAME, playerName, COOKIE_MAX_AGE, "/", 
                isSecure ? "Secure" : ""));
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç cookie —Å ID –∏–≥—Ä–æ–∫–∞
     */
    private void clearPlayerIdCookie(HttpServletResponse response) {
        String requestScheme = getRequestScheme();
        boolean isSecure = "https".equals(requestScheme);
        
        response.addHeader("Set-Cookie", 
            String.format("%s=; Max-Age=0; Path=%s; HttpOnly; %s; SameSite=Lax",
                PLAYER_ID_COOKIE_NAME, "/", isSecure ? "Secure" : ""));
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç cookie —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
     */
    private void clearPlayerNameCookie(HttpServletResponse response) {
        String requestScheme = getRequestScheme();
        boolean isSecure = "https".equals(requestScheme);
        
        response.addHeader("Set-Cookie", 
            String.format("%s=; Max-Age=0; Path=%s; %s; SameSite=Lax",
                PLAYER_NAME_COOKIE_NAME, "/", isSecure ? "Secure" : ""));
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞
     */
    private String generateUniquePlayerId() {
        String uuid = UUID.randomUUID().toString().replace("-", "");
        return "player_" + uuid.substring(0, 12);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ cookies –∏–≥—Ä–æ–∫–∞
     */
    public String getPlayerCookieInfo(HttpServletRequest request) {
        StringBuilder info = new StringBuilder();
        info.append("üç™ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ cookies –∏–≥—Ä–æ–∫–∞:\n");
        
        Cookie[] cookies = request.getCookies();
        if (cookies == null) {
            info.append("   Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n");
            return info.toString();
        }
        
        boolean hasPlayerId = false;
        boolean hasPlayerName = false;
        
        for (Cookie cookie : cookies) {
            if (PLAYER_ID_COOKIE_NAME.equals(cookie.getName())) {
                info.append("   Player ID: ").append(cookie.getValue()).append("\n");
                hasPlayerId = true;
            } else if (PLAYER_NAME_COOKIE_NAME.equals(cookie.getName())) {
                info.append("   Player Name: ").append(cookie.getValue()).append("\n");
                hasPlayerName = true;
            }
        }
        
        if (!hasPlayerId) {
            info.append("   Player ID cookie –Ω–µ –Ω–∞–π–¥–µ–Ω\n");
        }
        if (!hasPlayerName) {
            info.append("   Player Name cookie –Ω–µ –Ω–∞–π–¥–µ–Ω\n");
        }
        
        return info.toString();
    }
}
