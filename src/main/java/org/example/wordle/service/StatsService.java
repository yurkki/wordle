package org.example.wordle.service;

import org.example.wordle.model.DailyStats;
import org.example.wordle.model.GameStats;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
 */
@Service
public class StatsService {
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
    // –ö–ª—é—á: –¥–∞—Ç–∞ –∏–≥—Ä—ã, –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    private final Map<LocalDate, List<GameStats>> dailyStats = new ConcurrentHashMap<>();
    
    // –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    private LocalDate lastCleanupDate = null;
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
     */
    public void recordGameStats(LocalDate gameDate, int attempts, String playerId, String targetWord, int gameTimeSeconds) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
        ensureCurrentDayStats(gameDate);
        
        GameStats stats = new GameStats(
            gameDate, 
            attempts, 
            LocalDateTime.now(), 
            playerId, 
            targetWord,
            gameTimeSeconds
        );
        
        dailyStats.computeIfAbsent(gameDate, k -> new ArrayList<>()).add(stats);
        
        System.out.println("üìä –ó–∞–ø–∏—Å–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã: " + stats);
        System.out.println("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ " + gameDate + ": " + dailyStats.get(gameDate).size() + " –∏–≥—Ä–æ–∫–æ–≤");
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
     */
    public DailyStats getDailyStats(LocalDate date) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
        ensureCurrentDayStats(date);
        
        List<GameStats> dayStats = dailyStats.getOrDefault(date, new ArrayList<>());
        
        if (dayStats.isEmpty()) {
            return new DailyStats(date, "", 0, 0, 0.0, new HashMap<>(), new ArrayList<>(), null);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–Ω—è –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        String targetWord = dayStats.get(0).getTargetWord();
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        int totalPlayers = dayStats.size();
        int successfulPlayers = (int) dayStats.stream()
            .filter(GameStats::isSuccess)
            .count();
        
        double successRate = totalPlayers > 0 ? (double) successfulPlayers / totalPlayers * 100 : 0.0;
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
        Map<Integer, Integer> attemptsDistribution = dayStats.stream()
            .filter(GameStats::isSuccess)
            .collect(Collectors.groupingBy(
                GameStats::getAttempts,
                Collectors.collectingAndThen(Collectors.counting(), Math::toIntExact)
            ));
        
        // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º, –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã)
        List<DailyStats.PlayerResult> topPlayers = dayStats.stream()
            .filter(GameStats::isSuccess)
            .sorted((a, b) -> {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
                int attemptsCompare = Integer.compare(a.getAttempts(), b.getAttempts());
                if (attemptsCompare != 0) {
                    return attemptsCompare;
                }
                // –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
                return Integer.compare(a.getGameTimeSeconds(), b.getGameTimeSeconds());
            })
            .map(stats -> new DailyStats.PlayerResult(
                stats.getPlayerId(),
                stats.getAttempts(),
                stats.getCompletedAt(),
                0, // –†–∞–Ω–≥ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∂–µ
                true,
                stats.getGameTimeSeconds()
            ))
            .collect(Collectors.toList());
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–≥–∏
        for (int i = 0; i < topPlayers.size(); i++) {
            topPlayers.get(i).setRank(i + 1);
        }
        
        return new DailyStats(
            date,
            targetWord,
            totalPlayers,
            successfulPlayers,
            successRate,
            attemptsDistribution,
            topPlayers,
            null
        );
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public DailyStats getDailyStatsWithPlayerResult(LocalDate date, String playerId) {
        DailyStats dailyStats = getDailyStats(date);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        Optional<DailyStats.PlayerResult> playerResult = dailyStats.getTopPlayers().stream()
            .filter(result -> result.getPlayerId().equals(playerId))
            .findFirst();
        
        if (playerResult.isPresent()) {
            dailyStats.setPlayerResult(playerResult.get());
        } else {
            // –ò–≥—Ä–æ–∫ –Ω–µ —É–≥–∞–¥–∞–ª –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–ª
            dailyStats.setPlayerResult(new DailyStats.PlayerResult(
                playerId, 0, null, 0, false, 0
            ));
        }
        
        return dailyStats;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
     */
    public List<DailyStats> getRecentStats(int days) {
        LocalDate endDate = LocalDate.now();
        LocalDate startDate = endDate.minusDays(days - 1);
        
        List<DailyStats> recentStats = new ArrayList<>();
        for (LocalDate date = startDate; !date.isAfter(endDate); date = date.plusDays(1)) {
            recentStats.add(getDailyStats(date));
        }
        
        return recentStats;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
     */
    public void cleanupOldStats(int keepDays) {
        LocalDate cutoffDate = LocalDate.now().minusDays(keepDays);
        dailyStats.entrySet().removeIf(entry -> entry.getKey().isBefore(cutoffDate));
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω—É–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private void ensureCurrentDayStats(LocalDate currentDate) {
        LocalDate today = LocalDate.now();
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (!currentDate.equals(today)) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (lastCleanupDate != null && lastCleanupDate.equals(today)) {
            return; // –û—á–∏—Å—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
        boolean hasOldStats = dailyStats.keySet().stream()
            .anyMatch(date -> date.isBefore(today));
        
        if (hasOldStats) {
            System.out.println("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...");
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
            dailyStats.entrySet().removeIf(entry -> entry.getKey().isBefore(today));
            
            System.out.println("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è: " + today);
            System.out.println("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ " + today + ": " + 
                dailyStats.getOrDefault(today, new ArrayList<>()).size() + " –∏–≥—Ä–æ–∫–æ–≤");
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à - –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        lastCleanupDate = today;
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    public void resetStatsForDate(LocalDate date) {
        dailyStats.remove(date);
        System.out.println("üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –¥–ª—è –¥–∞—Ç—ã: " + date);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public String getStatsInfo() {
        StringBuilder info = new StringBuilder();
        info.append("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:\n");
        
        if (dailyStats.isEmpty()) {
            info.append("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞\n");
        } else {
            dailyStats.forEach((date, stats) -> {
                info.append("   ").append(date).append(": ").append(stats.size()).append(" –∏–≥—Ä–æ–∫–æ–≤\n");
            });
        }
        
        return info.toString();
    }
}
