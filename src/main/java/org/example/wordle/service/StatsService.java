package org.example.wordle.service;

import org.example.wordle.model.DailyStats;
import org.example.wordle.model.GameStats;
import org.example.wordle.model.GameStatsEntity;
import org.example.wordle.repository.GameStatsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
 */
@Service
public class StatsService {
    
    @Autowired
    private GameStatsRepository gameStatsRepository;
    
    @Autowired
    private LocalTimeService localTimeService;
    
    @Autowired
    private DailyGameValidationService dailyGameValidationService;
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω—è
     */
    public boolean recordGameStats(LocalDate gameDate, int attempts, String playerId, String targetWord, int gameTimeSeconds) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è
        if (!dailyGameValidationService.canPlayerPlayToday(playerId)) {
            System.out.println("‚ùå –ò–≥—Ä–æ–∫ " + playerId + " —É–∂–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–Ω–æ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ –¥–Ω—è
        if (!dailyGameValidationService.isValidTimeForDailyGame()) {
            System.out.println("‚ùå –í—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ –¥–Ω—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è");
            return false;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ targetWord –Ω–µ –ø—É—Å—Ç–æ–µ
        if (targetWord == null || targetWord.trim().isEmpty()) {
            System.out.println("‚ùå Target word –ø—É—Å—Ç–æ–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è");
            return false;
        }
        
        GameStats gameStats = new GameStats(gameDate, attempts, localTimeService.getCurrentMoscowDateTime(), playerId,
                targetWord, gameTimeSeconds);
        
        GameStatsEntity entity = new GameStatsEntity(gameStats);
        gameStatsRepository.save(entity);
        
        System.out.println("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: " + gameStats);
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
     */
    public DailyStats getDailyStats(LocalDate date) {
        List<GameStatsEntity> dayStats = gameStatsRepository.findByGameDateOrderByAttemptsAscGameTimeSecondsAsc(date);
        
        if (dayStats.isEmpty()) {
            return new DailyStats(date, "", 0, 0, 0.0, new HashMap<>(), new ArrayList<>(), null);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–Ω—è –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        String targetWord = dayStats.get(0).getTargetWord();
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        int totalPlayers = dayStats.size();
        int successfulPlayers = (int) dayStats.stream()
            .filter(GameStatsEntity::isSuccess)
            .count();
        
        double successRate = totalPlayers > 0 ? (double) successfulPlayers / totalPlayers * 100 : 0.0;
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
        Map<Integer, Integer> attemptsDistribution = dayStats.stream()
            .filter(GameStatsEntity::isSuccess)
            .collect(Collectors.groupingBy(
                GameStatsEntity::getAttempts,
                Collectors.collectingAndThen(Collectors.counting(), Math::toIntExact)
            ));
        
        // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ)
        List<DailyStats.PlayerResult> topPlayers = dayStats.stream()
            .filter(GameStatsEntity::isSuccess)
            .map(stats -> new DailyStats.PlayerResult(
                stats.getPlayerId(),
                stats.getAttempts(),
                stats.getCompletedAt(),
                0, // –†–∞–Ω–≥ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∂–µ
                true,
                stats.getGameTimeSeconds()
            ))
            .collect(Collectors.toList());
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–≥–∏
        for (int i = 0; i < topPlayers.size(); i++) {
            topPlayers.get(i).setRank(i + 1);
        }
        
        return new DailyStats(
            date,
            targetWord,
            totalPlayers,
            successfulPlayers,
            successRate,
            attemptsDistribution,
            topPlayers,
            null
        );
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public DailyStats getDailyStatsWithPlayerResult(LocalDate date, String playerId) {
        DailyStats dailyStats = getDailyStats(date);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        Optional<DailyStats.PlayerResult> playerResult = dailyStats.getTopPlayers().stream()
            .filter(result -> result.getPlayerId().equals(playerId))
            .findFirst();
        
        if (playerResult.isPresent()) {
            dailyStats.setPlayerResult(playerResult.get());
        } else {
            // –ò–≥—Ä–æ–∫ –Ω–µ —É–≥–∞–¥–∞–ª –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–ª
            dailyStats.setPlayerResult(new DailyStats.PlayerResult(
                playerId, 0, null, 0, false, 0
            ));
        }
        
        return dailyStats;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
     */
    public List<DailyStats> getRecentStats(int days) {
        LocalDate endDate = localTimeService.getCurrentMoscowDate();
        LocalDate startDate = endDate.minusDays(days - 1);
        
        List<GameStatsEntity> recentStats = gameStatsRepository.findByGameDateBetween(startDate, endDate);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        Map<LocalDate, List<GameStatsEntity>> statsByDate = recentStats.stream()
            .collect(Collectors.groupingBy(GameStatsEntity::getGameDate));
        
        List<DailyStats> result = new ArrayList<>();
        for (LocalDate date = startDate; !date.isAfter(endDate); date = date.plusDays(1)) {
            List<GameStatsEntity> dayStats = statsByDate.getOrDefault(date, new ArrayList<>());
            result.add(calculateDailyStats(date, dayStats));
        }
        
        return result;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
     */
    public void cleanupOldStats(int keepDays) {
        LocalDate cutoffDate = localTimeService.getCurrentMoscowDate().minusDays(keepDays);
        gameStatsRepository.deleteByGameDateBefore(cutoffDate);
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    public void resetStatsForDate(LocalDate date) {
        gameStatsRepository.deleteByGameDate(date);
        System.out.println("üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –¥–ª—è –¥–∞—Ç—ã: " + date);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public String getStatsInfo() {
        StringBuilder info = new StringBuilder();
        info.append("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:\n");
        
        long totalRecords = gameStatsRepository.count();
        if (totalRecords == 0) {
            info.append("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞\n");
        } else {
            info.append("   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ").append(totalRecords).append("\n");
        }
        
        return info.toString();
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è
     */
    private DailyStats calculateDailyStats(LocalDate date, List<GameStatsEntity> dayStats) {
        if (dayStats.isEmpty()) {
            return new DailyStats(date, "", 0, 0, 0.0, new HashMap<>(), new ArrayList<>(), null);
        }
        
        String targetWord = dayStats.get(0).getTargetWord();
        int totalPlayers = dayStats.size();
        int successfulPlayers = (int) dayStats.stream().filter(GameStatsEntity::isSuccess).count();
        double successRate = totalPlayers > 0 ? (double) successfulPlayers / totalPlayers * 100 : 0.0;
        
        Map<Integer, Integer> attemptsDistribution = dayStats.stream()
            .filter(GameStatsEntity::isSuccess)
            .collect(Collectors.groupingBy(
                GameStatsEntity::getAttempts,
                Collectors.collectingAndThen(Collectors.counting(), Math::toIntExact)
            ));
        
        List<DailyStats.PlayerResult> topPlayers = dayStats.stream()
            .filter(GameStatsEntity::isSuccess)
            .map(stats -> new DailyStats.PlayerResult(
                stats.getPlayerId(),
                stats.getAttempts(),
                stats.getCompletedAt(),
                0,
                true,
                stats.getGameTimeSeconds()
            ))
            .collect(Collectors.toList());
        
        for (int i = 0; i < topPlayers.size(); i++) {
            topPlayers.get(i).setRank(i + 1);
        }
        
        return new DailyStats(date, targetWord, totalPlayers, successfulPlayers, successRate, 
                            attemptsDistribution, topPlayers, null);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω—è
     */
    public boolean canPlayerPlayToday(String playerId) {
        return dailyGameValidationService.canPlayerPlayToday(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ—á–µ–º—É –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å
     */
    public String getPlayRestrictionReason(String playerId) {
        return dailyGameValidationService.getPlayRestrictionReason(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    public String getTodayPlayerStats(String playerId) {
        return dailyGameValidationService.getTodayPlayerStats(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä—ã
     */
    public String getTimeInfo() {
        return dailyGameValidationService.getTimeInfo();
    }
}
